Tasks: The daily schedule was a regular 9 to 5, starting with organizing the to-do list for the day. Then, a small lunch break with the team at 2pm before finally leaving the office at 5pm. Going into more details, the internship was divided into 2 main chunks or milestones. The first milestone was mainly an education opportunity, where I was taught several frameworks to kickstart the second milestone seamlessly. The education process was undergone in the form of application on the backend of a mini website, using C# as the language, that was apparent only to the internal users in the organization. To begin with, in the first milestone I learned the basics of creating web APIs using ASP.NET Core for the backend. In addition, I was enlightened by PostgreSQL database, that was connected by the backend. The large database included 3 tables, first containing the stocks, second containing clients and the third containing stock orders that were done by the clients.  Regarding the frontend, I learned the usage of AngularJS to be able to create and design login and registration pages. Additionally, I was able to build a page that conveyed the prices of stocks, that also changed and updated without the need to refresh the page. Moreover, I created a page that connected the abovementioned 3 tables in order to view the customers’ names with the orders they made and the prices of stocks ordered.  Regarding the automatic price update of the stocks, I used SignalR in the frontend and backend. In the ASP.NET Core (backend), I created a Hub named Market Change to which the “update stock prices” service in the frontend is connected to. Moving to the frontend, I created this “update stock prices” service connecting it to the Market Change Hub in the backend. Thus, every 5 seconds the newly updated stock prices in the database are sent from the backend to the frontend without refreshing the page.  For the second milestone, I created a project for the internal users of EGID that was able to visualize what the clients of the firm owned from virtual machines and clusters. ASP.NET Core was also used for the backend and AngularJS for the frontend. I was able to make it visual to EGID’s internal users how much CPU cores and remaining storage is left inside the clusters and how much each virtual machine is occupying inside a node.  Regarding authentication and authorization, I used JSON Web Token (JWT) authentication to protect the ASP.NET Core API. This was done to provide access to various functionality of the application. The admin has a separate authority, where one can do something, unlike the authority of the user.  