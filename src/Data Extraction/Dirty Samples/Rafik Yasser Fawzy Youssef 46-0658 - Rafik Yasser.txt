Tasks: (Not less than 100 words)  The task of this internship was to extend the a functionality of the i-Core scheduler. First to have it implemented with backward compatibility, then to have it able to cope with the recent developments of the i-Core architecture. Moreover, it had to demonstrate its usefulness for the pipelined floating point special instructions. Finally, it had as a goal to implement the dynamic control flow to the object detection special instruction. The dynamic execution implements the concepts of conditional jumps, overhead-free loop support and exceptions/interruptions. Conditional jumps from one microinstruction to another should be possible depending on the intermediate results of the calculation of the reconfigurable accelerator. In addition, several internal counters with e.g. auto-increment functionality should be provided to support loops with a statically known number of iterations. And it should be possible for special commands to return error messages in the form of exceptions to the CPU. E.g. if the microcode reaches an unintended processing point. The soundness of the implementations of the thesis had to be seen in both the simulation as well as on The implementation presented by me solves the task presented in the introduction section completely. Various tests and their performance were created. Moreover, I was able to find all the critical bugs in the system and fix them. I was also able to correctly add the dynamic execution functionality to the object detection special 4 Student Career & Alumni Development Office. scad@guc.edu.eg | German University in Cairo New Cairo City - Main Entrance Al Tagamoa Al Khames; Egypt        instruction using conditional jump forms. I successfully implemented the backward compatibility and fixed the in-house assembler and assembler converter.  Internship 